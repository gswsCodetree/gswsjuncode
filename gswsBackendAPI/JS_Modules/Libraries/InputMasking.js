/*
 Author  : Venkatesh Nelli
 Version : 3.0
 License : GNU General Public License v3.0
 Description: This Directive is used for masking aadhaar number and mobile number
 */

!function () { "use strict"; var e = angular.module("input_masking", []); e.directive("uidInputModel", function () { return { restrict: "A", Scope: !0, controller: ["$scope", "$element", "$attrs", "$parse", function (a, e, u, n) { a.val_name = ""; var i = n(u.uidInputModel), o = u.maskLength, r = 0, l = new Array; l.push(8), e.bind("keypress", function (e) { if ($("input[uid-input-model=" + u.uidInputModel + "]").val().length < 12) { var n = e.which ? e.which : e.keyCode, t = 48 <= n && n <= 57 || -1 != l.indexOf(n); return t && (a.val_name += String.fromCharCode(n)), i.assign(a, a.val_name), t } }), e.bind("keyup", function (e) { r = 0; var n; if (navigator.userAgent.match(/Android/i)) { var t = this.value; n = t, a.val_name += n.substr(n.length - 1) } var l = $("input[uid-input-model=" + u.uidInputModel + "]").val(); null == o || null == o || "" == o ? l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X") : l.length <= o && (l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X")), $("input[uid-input-model=" + u.uidInputModel + "]").val(l), l.length != a.val_name.length && (a.val_name = a.val_name.substring(0, l.length)), i.assign(a, a.val_name) }), e.keydown(function (e) { r++; var n = e.keyCode || e.charCode; 8 != n ? 1 < r && e.preventDefault() : $("input[uid-input-model=" + u.uidInputModel + "]").val().length > e.target.selectionStart && e.preventDefault(), 46 == n && (e.preventDefault(), e.stopPropagation()), 37 == n && e.preventDefault(), 39 == n && e.preventDefault() }), e.bind("drop", function (e) { return !1 }), e.bind("paste", function (e) { return !1 }), a.$watch(i, function (e, n) { "" != e && null != e || ($("input[uid-input-model=" + u.uidInputModel + "]").val(""), a.val_name = "") }); var t = n(u.uidInputMask); a.$watch(t, function (e, n) { var t = a.$eval(u.uidInputModel); if (null != t && null != t && "" != t) if (1 == e) $("input[uid-input-model=" + u.uidInputModel + "]").val(t); else { for (var l = "", i = 0; i < t.length; i++) { l += i < u.maskLength ? "X" : t.charAt(i) } $("input[uid-input-model=" + u.uidInputModel + "]").val(l) } }) }] } }), e.directive("mobileInputModel", function () { return { restrict: "A", Scope: !0, controller: ["$scope", "$element", "$attrs", "$parse", function (a, e, u, n) { a.val_name = ""; var i = n(u.mobileInputModel), o = u.maskLength, r = 0, l = new Array; l.push(8), e.bind("keypress", function (e) { if ($("input[mobile-input-model=" + u.mobileInputModel + "]").val().length < 12) { var n = e.which ? e.which : e.keyCode, t = 48 <= n && n <= 57 || -1 != l.indexOf(n); return t && (a.val_name += String.fromCharCode(n)), i.assign(a, a.val_name), t } }), e.bind("keyup", function (e) { if (r = 0, 10 == $("input[mobile-input-model=" + u.mobileInputModel + "]").val().length) a.$eval(u.mobileInputModel); var n; if (navigator.userAgent.match(/Android/i)) { var t = this.value; n = t, a.val_name += n.substr(n.length - 1) } var l = $("input[mobile-input-model=" + u.mobileInputModel + "]").val(); null == o || null == o || "" == o ? l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X") : l.length <= o && (l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X")), $("input[mobile-input-model=" + u.mobileInputModel + "]").val(l), l.length != a.val_name.length && (a.val_name = a.val_name.substring(0, l.length)), i.assign(a, a.val_name) }), e.keydown(function (e) { r++; var n = e.keyCode || e.charCode; 8 != n ? 1 < r && e.preventDefault() : $("input[mobile-input-model=" + u.mobileInputModel + "]").val().length > e.target.selectionStart && e.preventDefault(), 46 == n && (e.preventDefault(), e.stopPropagation()), 37 == n && e.preventDefault(), 39 == n && e.preventDefault() }), e.bind("drop", function (e) { return !1 }), e.bind("paste", function (e) { return !1 }), a.$watch(i, function (e, n) { "" != e && null != e || ($("input[mobile-input-model=" + u.mobileInputModel + "]").val(""), a.val_name = "") }); var t = n(u.mobileInputMask); a.$watch(t, function (e, n) { var t = a.$eval(u.mobileInputModel); if (null != t && null != t && "" != t) if (1 == e) $("input[mobile-input-model=" + u.mobileInputModel + "]").val(t); else { for (var l = "", i = 0; i < t.length; i++) { l += i < u.maskLength ? "X" : t.charAt(i) } $("input[mobile-input-model=" + u.mobileInputModel + "]").val(l) } }) }] } }) }();