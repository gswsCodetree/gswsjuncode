/*
 Author  : Venkatesh Nelli
 Version : 3.0
 License : GNU General Public License v3.0
 Description: This Directive is used for masking aadhaar number and mobile number
 */


!function () { "use strict"; var e = angular.module("input_masking", []); e.directive("uidInputModel", function () { var d = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 2, 3, 4, 0, 6, 7, 8, 9, 5], [2, 3, 4, 0, 1, 7, 8, 9, 5, 6], [3, 4, 0, 1, 2, 8, 9, 5, 6, 7], [4, 0, 1, 2, 3, 9, 5, 6, 7, 8], [5, 9, 8, 7, 6, 0, 4, 3, 2, 1], [6, 5, 9, 8, 7, 1, 0, 4, 3, 2], [7, 6, 5, 9, 8, 2, 1, 0, 4, 3], [8, 7, 6, 5, 9, 3, 2, 1, 0, 4], [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]], p = [[0, 1, 2, 3, 4, 5, 6, 7, 8, 9], [1, 5, 7, 6, 2, 8, 3, 0, 9, 4], [5, 8, 0, 3, 7, 9, 6, 1, 4, 2], [8, 9, 1, 6, 0, 4, 3, 5, 2, 7], [9, 4, 5, 3, 1, 2, 6, 8, 7, 0], [4, 2, 8, 6, 5, 7, 3, 9, 0, 1], [2, 7, 9, 3, 8, 0, 6, 4, 1, 5], [7, 0, 4, 6, 9, 1, 3, 2, 5, 8]]; return { restrict: "A", Scope: !0, controller: ["$scope", "$element", "$attrs", "$parse", function (u, e, a, n) { u.val_name = ""; var i = n(a.uidInputModel), o = a.maskLength, r = 0, l = new Array; l.push(8), e.bind("keypress", function (e) { if ($("input[uid-input-model=" + a.uidInputModel + "]").val().length < 12) { var n = e.which ? e.which : e.keyCode, t = 48 <= n && n <= 57 || -1 != l.indexOf(n); return t && (u.val_name += String.fromCharCode(n)), i.assign(u, u.val_name), t } }), e.bind("keyup", function (e) { r = 0, 12 == $("input[uid-input-model=" + a.uidInputModel + "]").val().length && (function (e) { if (333333333333 == e || 666666666666 == e || 999999999999 == e) return !1; for (var n = 0, t = function (e) { for (var n = [e.length], t = 0; t < e.length; t++)n[t] = e.substring(t, t + 1); return n = function (e) { for (var n = [e.length], t = 0; t < e.length; t++)n[t] = e[e.length - (t + 1)]; return n }(n) }(e), l = 0; l < t.length; l++)n = d[n][p[l % 8][t[l]]]; return 0 == n }(u.$eval(a.uidInputModel)) || ($("input[uid-input-model=" + a.uidInputModel + "]").val(""), i.assign(u, ""), alert("Entered aadhaar number is invalid"))); var n; if (navigator.userAgent.match(/Android/i)) { var t = this.value; n = t, u.val_name += n.substr(n.length - 1) } var l = $("input[uid-input-model=" + a.uidInputModel + "]").val(); null == o || null == o || "" == o ? l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X") : l.length <= o && (l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X")), $("input[uid-input-model=" + a.uidInputModel + "]").val(l), l.length != u.val_name.length && (u.val_name = u.val_name.substring(0, l.length)), i.assign(u, u.val_name) }), e.keydown(function (e) { r++; var n = e.keyCode || e.charCode; 8 != n ? 1 < r && e.preventDefault() : $("input[uid-input-model=" + a.uidInputModel + "]").val().length > e.target.selectionStart && e.preventDefault(), 46 == n && (e.preventDefault(), e.stopPropagation()), 37 == n && e.preventDefault(), 39 == n && e.preventDefault() }), e.bind("drop", function (e) { return !1 }), e.bind("paste", function (e) { return !1 }), u.$watch(i, function (e, n) { "" != e && null != e || ($("input[uid-input-model=" + a.uidInputModel + "]").val(""), u.val_name = "") }); var t = n(a.uidInputMask); u.$watch(t, function (e, n) { var t = u.$eval(a.uidInputModel); if (null != t && null != t && "" != t) if (1 == e) $("input[uid-input-model=" + a.uidInputModel + "]").val(t); else { for (var l = "", i = 0; i < t.length; i++) { l += i < a.maskLength ? "X" : t.charAt(i) } $("input[uid-input-model=" + a.uidInputModel + "]").val(l) } }) }] } }), e.directive("mobileInputModel", function () { return { restrict: "A", Scope: !0, controller: ["$scope", "$element", "$attrs", "$parse", function (u, e, a, n) { u.val_name = ""; var i = n(a.mobileInputModel), o = a.maskLength, r = 0, l = new Array; l.push(8), e.bind("keypress", function (e) { if ($("input[mobile-input-model=" + a.mobileInputModel + "]").val().length < 12) { var n = e.which ? e.which : e.keyCode, t = 48 <= n && n <= 57 || -1 != l.indexOf(n); return t && (u.val_name += String.fromCharCode(n)), i.assign(u, u.val_name), t } }), e.bind("keyup", function (e) { r = 0, 10 == $("input[mobile-input-model=" + a.mobileInputModel + "]").val().length && (function (e) { return !!e.match("[6-9]{1}[0-9]{9}") }(u.$eval(a.mobileInputModel)) || ($("input[mobile-input-model=" + a.mobileInputModel + "]").val(""), i.assign(u, ""), alert("Entered mobile number is invalid"))); var n; if (navigator.userAgent.match(/Android/i)) { var t = this.value; n = t, u.val_name += n.substr(n.length - 1) } var l = $("input[mobile-input-model=" + a.mobileInputModel + "]").val(); null == o || null == o || "" == o ? l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X") : l.length <= o && (l = this.value.replace(/[^\d\X]/g, "").replace(/\d/g, "X")), $("input[mobile-input-model=" + a.mobileInputModel + "]").val(l), l.length != u.val_name.length && (u.val_name = u.val_name.substring(0, l.length)), i.assign(u, u.val_name) }), e.keydown(function (e) { r++; var n = e.keyCode || e.charCode; 8 != n ? 1 < r && e.preventDefault() : $("input[mobile-input-model=" + a.mobileInputModel + "]").val().length > e.target.selectionStart && e.preventDefault(), 46 == n && (e.preventDefault(), e.stopPropagation()), 37 == n && e.preventDefault(), 39 == n && e.preventDefault() }), e.bind("drop", function (e) { return !1 }), e.bind("paste", function (e) { return !1 }), u.$watch(i, function (e, n) { "" != e && null != e || ($("input[mobile-input-model=" + a.mobileInputModel + "]").val(""), u.val_name = "") }); var t = n(a.mobileInputMask); u.$watch(t, function (e, n) { var t = u.$eval(a.mobileInputModel); if (null != t && null != t && "" != t) if (1 == e) $("input[mobile-input-model=" + a.mobileInputModel + "]").val(t); else { for (var l = "", i = 0; i < t.length; i++) { l += i < a.maskLength ? "X" : t.charAt(i) } $("input[mobile-input-model=" + a.mobileInputModel + "]").val(l) } }) }] } }) }();